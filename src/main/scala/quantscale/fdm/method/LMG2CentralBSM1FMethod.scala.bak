package quantscale.fdm.method;

import org.slf4j.LoggerFactory
import quantscale.fdm.TridiagonalMatrix
import java.util.Arrays
import quantscale.fdm.payoff.FDPayoff
import quantscale.fdm.Parabolic1DFDSpec
import quantscale.fdm.State

class LMG2CentralBSM1FMethod(payoff: FDPayoff) extends Parabolic1DMethod {
  final val logger = LoggerFactory.getLogger(getClass());

  private val thetaMethod = new ThetaCentralBSM1FMethod(ThetaCentralBSM1FMethod.THETA_IMPLICIT);
  private var tridiagonalHalf: TridiagonalMatrix = null
  private var fFull, fTemp: State = null

  private var specialIndex: Int = 0;

  override def spec = thetaMethod.spec

  override def initSystem(specV: Parabolic1DFDSpec) {
    thetaMethod.initSystem(specV);
    thetaMethod.solver = solver;
    thetaMethod.smearingReducer = smearingReducer

    tridiagonalHalf = new TridiagonalMatrix(thetaMethod.tridiagonal.size)
    fFull = new State(payoff.stateDimensions, tridiagonalHalf.size)
    fTemp = new State(payoff.stateDimensions, tridiagonalHalf.size)
  }

  override def solve(currentTime: Double, dt: Double, f: State) {
    thetaMethod.initLeftHandSide(currentTime, dt)
    for (d <- 0 until f.stateDimensions) {
      solver.solve(thetaMethod.tridiagonal, f.values(d).clone(), fFull.values(d))
    }
    val m = thetaMethod.tridiagonal.size
    var i = 0
    while (i < m) {
      tridiagonalHalf.lower(i) = thetaMethod.tridiagonal.lower(i) * 0.5
      tridiagonalHalf.upper(i) = thetaMethod.tridiagonal.upper(i) * 0.5
      tridiagonalHalf.middle(i) = 1 + (thetaMethod.tridiagonal.middle(i) - 1) * 0.5
      i += 1
    }
    if (payoff != null) payoff.setTime(currentTime + dt * 0.5);
    for (d <- 0 until f.stateDimensions) {
      solver.solve(tridiagonalHalf, f.values(d), fTemp.values(d))
    }
    if (payoff != null) payoff.setTime(currentTime);
    for (d <- 0 until f.stateDimensions) {
      val fTempValues = fTemp.values(d)
      val fValues = fTemp.values(d)
      solver.solve(tridiagonalHalf, fTempValues, fValues)
      val fFullValues = fFull.values(d)
      i = 0
      while (i < m) {
        fValues(i) = 2 * fValues(i) - fFullValues(i)
        i += 1
      }
    }
  }

}