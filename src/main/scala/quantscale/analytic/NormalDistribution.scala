package quantscale.analytic

object NormalDistribution {
  private final val ONE_OVER_SQRT_2PI = 1.0 / math.sqrt(2 * math.Pi)
  private final val sixten = 1.6
  private final val half = 0.5
  private final val gaussiancache = Array(
    1.0,
    0.8225775623986646,
    0.45783336177161427,
    0.17242162389375282,
    0.04393693362340742,
    0.0075756774442599355,
    8.8382630693505E-4,
    6.97695771959971E-5,
    3.726653172078671E-6,
    1.3468696888087105E-7,
    3.293714110306081E-9,
    5.450043132884139E-11,
    6.101936677605324E-13,
    4.6226304054837065E-15,
    2.3695417473401762E-17,
    8.21851355409674E-20,
    1.9287498479639178E-22,
    3.062754960614617E-25,
    3.2908062772749125E-28,
    2.392467793507312E-31,
    1.1769109439216723E-34,
    3.9173720507639355E-38,
    8.822664357494676E-42,
    1.3444925891435144E-45,
    1.3863432936411706E-49,
    9.672458544585053E-54,
    4.56621846799413E-58,
    1.4585798627990605E-62,
    3.1525171551450254E-67,
    4.610398037956961E-72,
    4.562187213172341E-77,
    3.054650322987053E-82,
    1.3838965267367376E-87,
    4.242281221273841E-93,
    8.799317893789084E-99,
    1.2349582593118956E-104,
    1.172760333284856E-110,
    7.535637097806883E-117,
    3.2763055742293644E-123,
    9.6383466948086E-130,
    1.918555668934785E-136,
    2.5840444767803813E-143,
    2.3549369378029553E-150,
    1.452152734710506E-157,
    6.058973183256686E-165,
    1.7105646060188057E-172,
    3.267635840679748E-180,
    4.2235879117799935E-188,
    3.693883068487256E-196,
    2.185941155925721E-204,
    8.752810140573584E-213,
    2.3714297698941227E-221,
    4.34737140886962E-230,
    5.392584265458177E-239,
    4.526065696778843E-248,
    2.570386815553163E-257,
    9.87710872151989E-267,
    2.5681175670893212E-276,
    4.518077612005784E-286,
    5.378314452198656E-296,
    4.332039538514401E-306,
    2.36098024E-316)
  /**
   * PDF
   */
  def value(x: Double): Double = {
    return math.exp(-half * x * x) * ONE_OVER_SQRT_2PI
  }

  def denormalizedValue(y: Double): Double = {
//    return math.exp(-half * y * y)
    val xsqi = (math.abs(y) * sixten).toInt
    val xsq = xsqi.toDouble / sixten;
    val del = (y - xsq) * (y + xsq);
    return if (xsqi >= gaussiancache.length) 0.0 else
    gaussiancache(xsqi) * math.exp(-del * half)
  }
}